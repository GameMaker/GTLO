<VisualMicro>
  <Program Name="GTLO" Ext=".ino" Location="D:\Dropbox\AJC\Arduino\GTLO">
    <Compile IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" ReCompileIfSourceIsNewer="1" IsDebugStart="1" SketchName="GTLO" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino/Genuino Uno" CoreFolder="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="c:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="c:\Program Files (x86)\Arduino" McuSketchBookPath="d:\Dropbox\AJC\Arduino" name="Arduino/Genuino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0x05" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.ide.path="c:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10800" target_package="arduino" target_platform="avr" runtime.hardware.path="c:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.16" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="{network_cmd} -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\u0koq4y1.a52\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" runtime.tools.avr-gcc.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.3-arduino2.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino8.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.0.0.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="uno" runtime.vm.boardinfo.name="uno" runtime.vm.boardinfo.desc="Arduino/Genuino Uno" runtime.vm.boardinfo.src_location="c:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="For all platforms that use Board Manager" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="d:\Dropbox\AJC\Arduino" build.core.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="c:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" build.path="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" build.project_name="GTLO.ino" build.project_path="D:\Dropbox\AJC\Arduino\GTLO" ProjectDir="D:\Dropbox\AJC\Arduino\GTLO\" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM2" serial.port="COM2" serial.port.num="2" serial.port.caption="COM2   - Arduino Uno" serial.Availability="2" serial.Binary="True" serial.Caption="Arduino Uno (COM2)" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_SerialPort" serial.Description="Arduino Uno" serial.DeviceID="COM2" serial.MaxBaudRate="115200" serial.MaximumInputBufferSize="0" serial.MaximumOutputBufferSize="0" serial.Name="Arduino Uno (COM2)" serial.OSAutoDiscovered="True" serial.PNPDeviceID="USB\VID_2341&amp;PID_0001\954373138343516141A0" serial.PowerManagementCapabilities.value0="1" serial.PowerManagementSupported="False" serial.ProviderType="Modem Device" serial.SettableBaudRate="True" serial.SettableDataBits="True" serial.SettableFlowControl="True" serial.SettableParity="True" serial.SettableParityCheck="True" serial.SettableRLSD="True" serial.SettableStopBits="True" serial.Status="OK" serial.StatusInfo="3" serial.Supports16BitMode="False" serial.SupportsDTRDSR="True" serial.SupportsElapsedTimeouts="True" serial.SupportsIntTimeouts="True" serial.SupportsParityCheck="True" serial.SupportsRLSD="True" serial.SupportsRTSCTS="False" serial.SupportsSpecialCharacters="False" serial.SupportsXOnXOff="False" serial.SupportsXOnXOffSet="False" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="AARONSXIDAX" vm.runtime.compiler.auto_discover_includes="false" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Paddle.cpp, line 18" Id="5e773593-230a-4293-975a-0e05f237fdb3" Enabled="1" Message="$FUNCTION: paddle is at {_loc} by {_width}" MessageTextType="0" PreProcessedMessage="init(CRGB leds[NUM_LEDS]): paddle is at {0} by {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="18" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5e773593-230a-4293-975a-0e05f237fdb3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>11		Serial.println("In the Paddle init");
12		_loc = 25;
13		_width = 1;
14		_color = CRGB::Blue;
15		_brightness = 255;
16		_brightnessDir = -1;
17		_brightnessSpeed = 2;
--&gt;18		_leds = leds;
19	}
20	
21	void Paddle::update() {
22		Serial.println("Updating paddle");
23	}
24	
25	int lowLED;
26	int highLED;
27	int intensity;
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Paddle.cpp, line 22" Id="c0789f8e-e9df-4b62-9970-b81a474b11cb" Enabled="1" Message="$FUNCTION: paddle is at {_loc} by {_width}" MessageTextType="0" PreProcessedMessage="update(): paddle is at {0} by {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="22" FileColumn="1" FunctionName="update()" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c0789f8e-e9df-4b62-9970-b81a474b11cb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>15		_brightness = 255;
16		_brightnessDir = -1;
17		_brightnessSpeed = 2;
18		_leds = leds;
19	}
20	
21	void Paddle::update() {
--&gt;22		Serial.println("Updating paddle");
23	}
24	
25	int lowLED;
26	int highLED;
27	int intensity;
28	int i;
29	
30	void Paddle::render() {
31		// You need to start at loc - 1/2 width, rounding down
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="GTLO.ino, line 32" Id="b0f0d532-72b9-451d-b20e-bc2654490836" Enabled="1" Message="$FUNCTION: paddle is at {paddle._loc} by {paddle._width}" MessageTextType="0" PreProcessedMessage="loop(): paddle is at {0} by {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\gtlo.ino" FileLine="32" FileColumn="1" FunctionName="loop()" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b0f0d532-72b9-451d-b20e-bc2654490836'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>25	}
26	
27	void loop()
28	{
29	
30	  /* add main program code here */
31		// TODO Instead of delay, use a nextFrameMillis system to try and maintain 50, so it doesn't slow down if frames start taking significant millis
--&gt;32		sprintf(debugString, "Looping millis %lu", millis());
33		Serial.println(debugString);
34		paddle.update();
35		paddle.render();
36		render();
37	}
38	
39	/****************************************************************************
40	**                                                                         **
41	**                             UTILITIES                                   **
</Source>
        <MessageVariables>
          <MessageVariable Name="paddle._loc" Index="1" />
          <MessageVariable Name="paddle._width" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Paddle.cpp, line 32" Id="a55f6d55-4241-4d0f-9e40-c29381e24643" Enabled="1" Message="$FUNCTION: paddle is at {_loc} by {_width}" MessageTextType="0" PreProcessedMessage="render(): paddle is at {0} by {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="32" FileColumn="1" FunctionName="render()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a55f6d55-4241-4d0f-9e40-c29381e24643'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>25	int lowLED;
26	int highLED;
27	int intensity;
28	int i;
29	
30	void Paddle::render() {
31		// You need to start at loc - 1/2 width, rounding down
--&gt;32		lowLED = max(0, (_loc) / 2);
33		// And go up to loc + 1/2 width, rounding up
34		highLED = min(NUM_LEDS - 1, ((_loc) / 2) + 1);
35		intensity = 0;
36		for (i = lowLED; i &lt; highLED; i++) {
37			// The formula (scaled to 0.0-1.0) is:
38			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
39			// Because I said so.
40			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
41			// Oh, and then you need to multiply by 255, since that was from 0 to 1
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Paddle.cpp, line 36" Id="35573853-4f55-4893-8069-f7ec6c946c63" Enabled="1" Message="$FUNCTION Start of loop, lowLED = {lowLED}, highLED = {highLED}" MessageTextType="0" PreProcessedMessage="render() Start of loop, lowLED = {0}, highLED = {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="36" FileColumn="1" FunctionName="render()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='35573853-4f55-4893-8069-f7ec6c946c63'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>29	
30	void Paddle::render() {
31		// You need to start at loc - 1/2 width, rounding down
32		lowLED = max(0, (_loc) / 2);
33		// And go up to loc + 1/2 width, rounding up
34		highLED = min(NUM_LEDS - 1, ((_loc) / 2) + 1);
35		intensity = 0;
--&gt;36		for (i = lowLED; i &lt; highLED; i++) {
37			// The formula (scaled to 0.0-1.0) is:
38			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
39			// Because I said so.
40			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
41			// Oh, and then you need to multiply by 255, since that was from 0 to 1
42			intensity = max(0, min(1, (((_width - 1) / 2) + 1 - (abs(_loc - i))))) * 255;
43			_leds[i].r = _color.r * intensity;
44			_leds[i].g = _color.g * intensity;
45			_leds[i].b = _color.b * intensity;
</Source>
        <MessageVariables>
          <MessageVariable Name="lowLED" Index="1" />
          <MessageVariable Name="highLED" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="Paddle.cpp, line 43" Id="cfa5cb2c-7bfb-44c2-8936-4cf25fb9d21e" Enabled="1" Message="$FUNCTION Intensity [{i}] is {intensity}" MessageTextType="0" PreProcessedMessage="render() Intensity [{0}] is {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="43" FileColumn="1" FunctionName="render()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='cfa5cb2c-7bfb-44c2-8936-4cf25fb9d21e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>36		for (i = lowLED; i &lt; highLED; i++) {
37			// The formula (scaled to 0.0-1.0) is:
38			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
39			// Because I said so.
40			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
41			// Oh, and then you need to multiply by 255, since that was from 0 to 1
42			intensity = max(0, min(1, (((_width - 1) / 2) + 1 - (abs(_loc - i))))) * 255;
--&gt;43			_leds[i].r = _color.r * intensity;
44			_leds[i].g = _color.g * intensity;
45			_leds[i].b = _color.b * intensity;
46		}
47	}
</Source>
        <MessageVariables>
          <MessageVariable Name="i" Index="1" />
          <MessageVariable Name="intensity" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="Paddle.cpp, line 34" Id="6c4a314a-fcf2-42c5-92f8-7cbe88c54e74" Enabled="1" Message="$FUNCTION lowL {lowLED} highL {highLED}" MessageTextType="0" PreProcessedMessage="render() lowL {0} highL {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="34" FileColumn="1" FunctionName="render()" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6c4a314a-fcf2-42c5-92f8-7cbe88c54e74'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>27	int intensity;
28	int i;
29	
30	void Paddle::render() {
31		// You need to start at loc - 1/2 width, rounding down
32		lowLED = max(0, (_loc) / 2);
33		// And go up to loc + 1/2 width, rounding up
--&gt;34		highLED = min(NUM_LEDS - 1, ((_loc) / 2) + 1);
35		intensity = 0;
36		for (i = lowLED; i &lt; highLED; i++) {
37			// The formula (scaled to 0.0-1.0) is:
38			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
39			// Because I said so.
40			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
41			// Oh, and then you need to multiply by 255, since that was from 0 to 1
42			intensity = max(0, min(1, (((_width - 1) / 2) + 1 - (abs(_loc - i))))) * 255;
43			_leds[i].r = _color.r * intensity;
</Source>
        <MessageVariables>
          <MessageVariable Name="lowLED" Index="1" />
          <MessageVariable Name="highLED" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="Paddle.cpp, line 35" Id="c7b2729b-304d-4937-b01d-8c5df4458095" Enabled="1" Message="$FUNCTION lowL {lowLED} highL {highLED} numLEDs {NUM_LEDS}" MessageTextType="0" PreProcessedMessage="render() lowL {0} highL {1} numLEDs {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="35" FileColumn="1" FunctionName="render()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c7b2729b-304d-4937-b01d-8c5df4458095'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>28	int i;
29	
30	void Paddle::render() {
31		// You need to start at loc - 1/2 width, rounding down
32		lowLED = max(0, (_loc) / 2);
33		// And go up to loc + 1/2 width, rounding up
34		highLED = min(NUM_LEDS - 1, ((_loc) / 2) + 1);
--&gt;35		intensity = 0;
36		for (i = lowLED; i &lt; highLED; i++) {
37			// The formula (scaled to 0.0-1.0) is:
38			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
39			// Because I said so.
40			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
41			// Oh, and then you need to multiply by 255, since that was from 0 to 1
42			intensity = max(0, min(1, (((_width - 1) / 2) + 1 - (abs(_loc - i))))) * 255;
43			_leds[i].r = _color.r * intensity;
44			_leds[i].g = _color.g * intensity;
</Source>
        <MessageVariables>
          <MessageVariable Name="lowLED" Index="1" />
          <MessageVariable Name="highLED" Index="2" />
          <MessageVariable Name="NUM_LEDS" Index="3" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>