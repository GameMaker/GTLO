<VisualMicro>
  <Program Name="GTLO" Ext=".ino" Location="D:\Dropbox\AJC\Arduino\GTLO">
    <Compile IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" ReCompileIfSourceIsNewer="1" IsDebugStart="1" SketchName="GTLO" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="uno" Description="Arduino/Genuino Uno" CoreFolder="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="c:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" McuIdePath="c:\Program Files (x86)\Arduino" McuSketchBookPath="d:\Dropbox\AJC\Arduino" name="Arduino/Genuino Uno" vid.0="0x2341" pid.0="0x0043" vid.1="0x2341" pid.1="0x0001" vid.2="0x2A03" pid.2="0x0043" vid.3="0x2341" pid.3="0x0243" upload.tool="avrdude" upload.protocol="arduino" upload.maximum_size="32256" upload.maximum_data_size="2048" upload.speed="115200" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xDE" bootloader.extended_fuses="0x05" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" bootloader.file="optiboot/optiboot_atmega328.hex" build.mcu="atmega328p" build.f_cpu="16000000L" build.board="AVR_UNO" build.core="arduino" build.variant="standard" runtime.ide.path="c:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10800" target_package="arduino" target_platform="avr" runtime.hardware.path="c:\Program Files (x86)\Arduino\hardware\arduino" originalid="uno" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include\;{intellisense.tools.path}avr\include\avr\;{intellisense.tools.path}lib\gcc\avr\4.8.1\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.16" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="{network_cmd} -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\Extensions\k1vx04ay.pqg\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" runtime.tools.avr-gcc.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.9.2-atmel3.5.3-arduino.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino2.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.0.0.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.vm.boardinfo.id="uno" runtime.vm.boardinfo.name="uno" runtime.vm.boardinfo.desc="Arduino/Genuino Uno" runtime.vm.boardinfo.src_location="c:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="For all platforms that use Board Manager" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="d:\Dropbox\AJC\Arduino" build.core.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="c:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="c:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="c:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved="c:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\standard" build.path="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" build.project_name="GTLO.ino" build.project_path="D:\Dropbox\AJC\Arduino\GTLO" ProjectDir="D:\Dropbox\AJC\Arduino\GTLO\" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM4" serial.port="COM4" serial.port.num="4" serial.port.caption="COM4   - Arduino Uno" serial.Caption="Arduino Uno (COM4)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Uno" serial.DeviceID="USB\VID_2341&amp;PID_0001\954373138343516141A0" serial.HardwareID.value0="USB\VID_2341&amp;PID_0001" serial.Manufacturer="Arduino LLC (www.arduino.cc)" serial.Name="Arduino Uno (COM4)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2341&amp;PID_0001\954373138343516141A0" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="AARONSXIDAX" serial.vid="0x2341" serial.pid="0x0001" serial.iserial="954373138343516141A0" serial.port.iserial="954373138343516141A0" vm.runtime.compiler.auto_discover_includes="false" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\pounc\AppData\Local\Temp\VMBuilds\GTLO\uno\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="Paddle.cpp, line 24" Id="5e773593-230a-4293-975a-0e05f237fdb3" Enabled="0" Message="$FUNCTION: paddle is at {_loc} by {_width}, color {_color.r},{_color.g},{_color.b}, and each LED is {LED_WIDTH} wide" MessageTextType="0" PreProcessedMessage="init(CRGB leds[NUM_LEDS]): paddle is at {0} by {1}, color {2},{3},{4}, and each LED is {5} wide" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="24" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="15" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5e773593-230a-4293-975a-0e05f237fdb3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>17		// Start one LED wide
18		// TODO - put a warning message if you try to play on less than 50.
19		_color = CRGB::Red;
20		_brightness = 255;
21		_brightnessDir = -1;
22		_brightnessSpeed = 2;
23		_leds = leds;
--&gt;24	}
25	
26	int joyX, joyY;
27	bool adjustedPaddleLastFrame = false;
28	
29	void Paddle::update() {
30		joyX = analogRead(PIN_JOY_X);
31		joyY = analogRead(PIN_JOY_Y);
32	
33		if (joyX &gt; 512 + JOY_HALF_DEAD_ZONE) {
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
          <MessageVariable Name="_color.r" Index="3" />
          <MessageVariable Name="_color.g" Index="4" />
          <MessageVariable Name="_color.b" Index="5" />
          <MessageVariable Name="LED_WIDTH" Index="6" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="Paddle.cpp, line 68" Id="35573853-4f55-4893-8069-f7ec6c946c63" Enabled="0" Message="$FUNCTION Start of loop, lowLED = {lowLED}, highLED = {highLED}" MessageTextType="0" PreProcessedMessage="render() Start of loop, lowLED = {0}, highLED = {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="68" FileColumn="1" FunctionName="render()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='35573853-4f55-4893-8069-f7ec6c946c63'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
--&gt;68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
77			_leds[i].b = max(0, _leds[i].b - ((_color.b * intensity) / 100));
</Source>
        <MessageVariables>
          <MessageVariable Name="lowLED" Index="1" />
          <MessageVariable Name="highLED" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="Paddle.cpp, line 77" Id="cfa5cb2c-7bfb-44c2-8936-4cf25fb9d21e" Enabled="0" Message="$FUNCTION Intensity [{i}] is {intensity}" MessageTextType="0" PreProcessedMessage="render() Intensity [{0}] is {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="77" FileColumn="1" FunctionName="render()" FunctionLineOffset="19" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='cfa5cb2c-7bfb-44c2-8936-4cf25fb9d21e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
--&gt;77			_leds[i].b = max(0, _leds[i].b - ((_color.b * intensity) / 100));
78		}
79	}
</Source>
        <MessageVariables>
          <MessageVariable Name="i" Index="1" />
          <MessageVariable Name="intensity" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Paddle.cpp, line 66" Id="6c4a314a-fcf2-42c5-92f8-7cbe88c54e74" Enabled="0" Message="$FUNCTION lowL {lowLED} highL {highLED}" MessageTextType="0" PreProcessedMessage="render() lowL {0} highL {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="66" FileColumn="1" FunctionName="render()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6c4a314a-fcf2-42c5-92f8-7cbe88c54e74'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
--&gt;66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
</Source>
        <MessageVariables>
          <MessageVariable Name="lowLED" Index="1" />
          <MessageVariable Name="highLED" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="5" Name="Paddle.cpp, line 67" Id="c7b2729b-304d-4937-b01d-8c5df4458095" Enabled="0" Message="$FUNCTION loc {_loc} width {_width} start {start} end {end} LED_WIDTH  {LED_WIDTH}" MessageTextType="0" PreProcessedMessage="render() loc {0} width {1} start {2} end {3} LED_WIDTH  {4}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="67" FileColumn="1" FunctionName="render()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c7b2729b-304d-4937-b01d-8c5df4458095'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
--&gt;67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
          <MessageVariable Name="start" Index="3" />
          <MessageVariable Name="end" Index="4" />
          <MessageVariable Name="LED_WIDTH" Index="5" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="Paddle.cpp, line 79" Id="778bee77-4f39-4e9c-9752-bd4b4fd68d13" Enabled="0" Message="Paddle::$FUNCTION leds[{i}] is {_leds[i].r},{_leds[i].g},{_leds[i].b}, intensity is {intensity} {_width}" MessageTextType="0" PreProcessedMessage="Paddle::render() leds[{0}] is {1},{2},{3}, intensity is {4} {5}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="79" FileColumn="1" FunctionName="render()" FunctionLineOffset="21" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='778bee77-4f39-4e9c-9752-bd4b4fd68d13'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
77			_leds[i].b = max(0, _leds[i].b - ((_color.b * intensity) / 100));
78		}
--&gt;79	}
</Source>
        <MessageVariables>
          <MessageVariable Name="i" Index="1" />
          <MessageVariable Name="_leds[i].r" Index="2" />
          <MessageVariable Name="_leds[i].g" Index="3" />
          <MessageVariable Name="_leds[i].b" Index="4" />
          <MessageVariable Name="intensity" Index="5" />
          <MessageVariable Name="_width" Index="6" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="Paddle.cpp, line 32" Id="1df6f046-b291-4cd1-8bbd-3084222ed4af" Enabled="0" Message="Joystick is at {joyX}, {joyY}" MessageTextType="0" PreProcessedMessage="Joystick is at {0}, {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="32" FileColumn="1" FunctionName="update()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1df6f046-b291-4cd1-8bbd-3084222ed4af'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>25	
26	int joyX, joyY;
27	bool adjustedPaddleLastFrame = false;
28	
29	void Paddle::update() {
30		joyX = analogRead(PIN_JOY_X);
31		joyY = analogRead(PIN_JOY_Y);
--&gt;32	
33		if (joyX &gt; 512 + JOY_HALF_DEAD_ZONE) {
34			_loc = min(GAME_FIELD_UPPER_LIMIT, _loc + (joyX - 512) / JOY_X_SCALE_FACTOR);
35		}
36		else if (joyX &lt; 512 - JOY_HALF_DEAD_ZONE) {
37			_loc = max(0, _loc - ((512 - joyX) / JOY_X_SCALE_FACTOR));
38		}
39	
40		if (!adjustedPaddleLastFrame) {
41			if (joyY &gt; 512 + JOY_HALF_DEAD_ZONE) {
</Source>
        <MessageVariables>
          <MessageVariable Name="joyX" Index="1" />
          <MessageVariable Name="joyY" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="Paddle.cpp, line 39" Id="b35d84aa-eee7-466f-8885-c12cd8f905df" Enabled="0" Message="$FUNCTION {_loc} {joyX} {joyY}" MessageTextType="0" PreProcessedMessage="update() {0} {1} {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="39" FileColumn="1" FunctionName="update()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b35d84aa-eee7-466f-8885-c12cd8f905df'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>32	
33		if (joyX &gt; 512 + JOY_HALF_DEAD_ZONE) {
34			_loc = min(GAME_FIELD_UPPER_LIMIT, _loc + (joyX - 512) / JOY_X_SCALE_FACTOR);
35		}
36		else if (joyX &lt; 512 - JOY_HALF_DEAD_ZONE) {
37			_loc = max(0, _loc - ((512 - joyX) / JOY_X_SCALE_FACTOR));
38		}
--&gt;39	
40		if (!adjustedPaddleLastFrame) {
41			if (joyY &gt; 512 + JOY_HALF_DEAD_ZONE) {
42				_width = min(TOTAL_GAME_FIELD_UNITS / 2, _width + LED_WIDTH);
43				adjustedPaddleLastFrame = true;
44			}
45			else if (joyY &lt; 512 - JOY_HALF_DEAD_ZONE) {
46				_width = max(100, _width - LED_WIDTH);
47				adjustedPaddleLastFrame = true;
48			}
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="joyX" Index="2" />
          <MessageVariable Name="joyY" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="Paddle.cpp, line 76" Id="d1fb3583-2e55-4ce3-b4aa-710abcc0f757" Enabled="0" Message="Intensity [{i}] is {intensity}" MessageTextType="0" PreProcessedMessage="Intensity [{0}] is {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="76" FileColumn="1" FunctionName="render()" FunctionLineOffset="18" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d1fb3583-2e55-4ce3-b4aa-710abcc0f757'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
--&gt;76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
77			_leds[i].b = max(0, _leds[i].b - ((_color.b * intensity) / 100));
78		}
79	}
</Source>
        <MessageVariables>
          <MessageVariable Name="i" Index="1" />
          <MessageVariable Name="intensity" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="10" Name="Paddle.cpp, line 62" Id="c2c3d27f-9945-4f2e-901f-6f15d09a626a" Enabled="0" Message="Then, start is {start}" MessageTextType="0" PreProcessedMessage="Then, start is {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="62" FileColumn="1" FunctionName="render()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c2c3d27f-9945-4f2e-901f-6f15d09a626a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>55	int start;
56	int end;
57	int intensity;
58	
59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
--&gt;62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
</Source>
        <MessageVariables>
          <MessageVariable Name="start" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="11" Name="Paddle.cpp, line 63" Id="31b73375-31c7-465a-a765-cfeb951d1de4" Enabled="0" Message="Then, start is {start} ( after / by {LED_WIDTH})" MessageTextType="0" PreProcessedMessage="Then, start is {0} ( after / by {1})" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="63" FileColumn="1" FunctionName="render()" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='31b73375-31c7-465a-a765-cfeb951d1de4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>56	int end;
57	int intensity;
58	
59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
--&gt;63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
</Source>
        <MessageVariables>
          <MessageVariable Name="start" Index="1" />
          <MessageVariable Name="LED_WIDTH" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="12" Name="Paddle.cpp, line 44" Id="7db18f87-b6b5-41e5-bd0f-63c2a07bca75" Enabled="0" Message="Paddle got bigger to {_width}" MessageTextType="0" PreProcessedMessage="Paddle got bigger to {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="44" FileColumn="1" FunctionName="update()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7db18f87-b6b5-41e5-bd0f-63c2a07bca75'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>37			_loc = max(0, _loc - ((512 - joyX) / JOY_X_SCALE_FACTOR));
38		}
39	
40		if (!adjustedPaddleLastFrame) {
41			if (joyY &gt; 512 + JOY_HALF_DEAD_ZONE) {
42				_width = min(TOTAL_GAME_FIELD_UNITS / 2, _width + LED_WIDTH);
43				adjustedPaddleLastFrame = true;
--&gt;44			}
45			else if (joyY &lt; 512 - JOY_HALF_DEAD_ZONE) {
46				_width = max(100, _width - LED_WIDTH);
47				adjustedPaddleLastFrame = true;
48			}
49		}
50		else if (abs(joyY - 512) &lt; JOY_HALF_DEAD_ZONE) {
51			adjustedPaddleLastFrame = false;
52		}
53	}
</Source>
        <MessageVariables>
          <MessageVariable Name="_width" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="13" Name="Paddle.cpp, line 48" Id="107d3f4c-ba97-4b44-9137-a3ffd82a37f6" Enabled="0" Message="Paddle got smaller to {_width}" MessageTextType="0" PreProcessedMessage="Paddle got smaller to {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="48" FileColumn="1" FunctionName="update()" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='107d3f4c-ba97-4b44-9137-a3ffd82a37f6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>41			if (joyY &gt; 512 + JOY_HALF_DEAD_ZONE) {
42				_width = min(TOTAL_GAME_FIELD_UNITS / 2, _width + LED_WIDTH);
43				adjustedPaddleLastFrame = true;
44			}
45			else if (joyY &lt; 512 - JOY_HALF_DEAD_ZONE) {
46				_width = max(100, _width - LED_WIDTH);
47				adjustedPaddleLastFrame = true;
--&gt;48			}
49		}
50		else if (abs(joyY - 512) &lt; JOY_HALF_DEAD_ZONE) {
51			adjustedPaddleLastFrame = false;
52		}
53	}
54	
55	int start;
56	int end;
57	int intensity;
</Source>
        <MessageVariables>
          <MessageVariable Name="_width" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="14" Name="Paddle.cpp, line 74" Id="5c494df5-b777-49ba-bbe9-80f0d4fa210f" Enabled="0" Message="First, intensity [{i}] is {intensity}" MessageTextType="0" PreProcessedMessage="First, intensity [{0}] is {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="74" FileColumn="1" FunctionName="render()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5c494df5-b777-49ba-bbe9-80f0d4fa210f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
--&gt;74			intensity = max(0,min(100, intensity));
75			_leds[i].r = max(0, _leds[i].r - ((_color.r * intensity) / 100));
76			_leds[i].g = max(0, _leds[i].g - ((_color.g * intensity) / 100));
77			_leds[i].b = max(0, _leds[i].b - ((_color.b * intensity) / 100));
78		}
79	}
</Source>
        <MessageVariables>
          <MessageVariable Name="i" Index="1" />
          <MessageVariable Name="intensity" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="15" Name="Paddle.cpp, line 65" Id="bf46ac01-16f6-43a3-bfc2-446a30e46dfa" Enabled="0" Message="$FUNCTION: paddle is at {_loc} by {_width}" MessageTextType="0" PreProcessedMessage="render(): paddle is at {0} by {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="65" FileColumn="1" FunctionName="render()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='bf46ac01-16f6-43a3-bfc2-446a30e46dfa'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>58	
59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
--&gt;65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
74			intensity = max(0,min(100, intensity));
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="16" Name="GTLO.ino, line 32" Id="36ed1d0b-f68b-4b01-9595-9fca845089b4" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\gtlo.ino" FileLine="32" FileColumn="1" FunctionName="setup()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='36ed1d0b-f68b-4b01-9595-9fca845089b4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>25	{
26	
27	  /* add setup code here */
28		FastLED.addLeds&lt;WS2811, LED_DATA_PIN&gt;(leds, NUM_LEDS);
29	
30		paddle.init(leds);
31		dropBall();
--&gt;32	}
33	
34	void loop()
35	{
36	
37	  /* add main program code here */
38		// TODO Instead of delay, use a nextFrameMillis system to try and maintain 50, so it doesn't slow down if frames start taking significant millis
39		fill_solid(leds, NUM_LEDS, CRGB::White);
40		paddle.update();
41		paddle.render();
</Source>
      </BreakPoint>
      <BreakPoint Index="17" Name="GTLO.ino, line 51" Id="9836a1b7-e156-4c8a-b0e4-6752bbaa1b7d" Enabled="0" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\gtlo.ino" FileLine="51" FileColumn="1" FunctionName="dropBall()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9836a1b7-e156-4c8a-b0e4-6752bbaa1b7d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>44			ballList[i].render();
45		}
46		render();
47	}
48	
49	void dropBall() {
50		if (numOfBalls &lt; MAX_NUM_OF_BALLS - 1) {
--&gt;51			ballList[numOfBalls] = Ball();
52			ballList[numOfBalls].init(leds);
53			numOfBalls++;
54		}
55	}
56	/****************************************************************************
57	**                                                                         **
58	**                             UTILITIES                                   **
59	**                                                                         **
60	*****************************************************************************/
</Source>
      </BreakPoint>
      <BreakPoint Index="18" Name="Ball.cpp, line 15" Id="f4534432-c114-4532-8843-80f5663f0228" Enabled="0" Message="Ball initialized at {_loc}" MessageTextType="0" PreProcessedMessage="Ball initialized at {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\ball.cpp" FileLine="15" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f4534432-c114-4532-8843-80f5663f0228'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>8		_loc = rand();
9		_loc = _loc / (RAND_MAX / TOTAL_GAME_FIELD_UNITS);
10		//_loc = _loc / RAND_MAX;
11		_width = LED_WIDTH / 2;
12		_color = CRGB::Blue;
13		_height = 10000;
14		_speed = 0;
--&gt;15		_leds = leds;
16	}
17	
18	Ball::~Ball()
19	{
20	}
21	
22	void Ball::update() {
23		_speed -= 1;
24		_height += _speed;
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="19" Name="Ball.cpp, line 8" Id="637cff19-8110-4eb7-b5e2-e2242b1d33d8" Enabled="0" Message="loc1 {_loc}" MessageTextType="0" PreProcessedMessage="loc1 {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\ball.cpp" FileLine="8" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='637cff19-8110-4eb7-b5e2-e2242b1d33d8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1	#include "Ball.h"
2	
3	Ball::Ball()
4	{
5	}
6	
7	void Ball::init(CRGB leds[NUM_LEDS]) {
--&gt;8		_loc = rand();
9		_loc = _loc / (RAND_MAX / TOTAL_GAME_FIELD_UNITS);
10		//_loc = _loc / RAND_MAX;
11		_width = LED_WIDTH / 2;
12		_color = CRGB::Blue;
13		_height = 10000;
14		_speed = 0;
15		_leds = leds;
16	}
17	
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="20" Name="Ball.cpp, line 9" Id="efad19f1-74c9-427b-9611-28a8062a108b" Enabled="0" Message="loc2 {_loc}" MessageTextType="0" PreProcessedMessage="loc2 {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\ball.cpp" FileLine="9" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='efad19f1-74c9-427b-9611-28a8062a108b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>2	
3	Ball::Ball()
4	{
5	}
6	
7	void Ball::init(CRGB leds[NUM_LEDS]) {
8		_loc = rand();
--&gt;9		_loc = _loc / (RAND_MAX / TOTAL_GAME_FIELD_UNITS);
10		//_loc = _loc / RAND_MAX;
11		_width = LED_WIDTH / 2;
12		_color = CRGB::Blue;
13		_height = 10000;
14		_speed = 0;
15		_leds = leds;
16	}
17	
18	Ball::~Ball()
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="21" Name="Ball.cpp, line 10" Id="2163d6cd-f45f-4829-b5ad-3a4f738d5395" Enabled="0" Message="loc3 {_loc}" MessageTextType="0" PreProcessedMessage="loc3 {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\ball.cpp" FileLine="10" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2163d6cd-f45f-4829-b5ad-3a4f738d5395'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>3	Ball::Ball()
4	{
5	}
6	
7	void Ball::init(CRGB leds[NUM_LEDS]) {
8		_loc = rand();
9		_loc = _loc / (RAND_MAX / TOTAL_GAME_FIELD_UNITS);
--&gt;10		//_loc = _loc / RAND_MAX;
11		_width = LED_WIDTH / 2;
12		_color = CRGB::Blue;
13		_height = 10000;
14		_speed = 0;
15		_leds = leds;
16	}
17	
18	Ball::~Ball()
19	{
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="22" Name="Paddle.cpp, line 14" Id="df8b9f73-b84a-4542-9ef8-7cbfe4eb14fe" Enabled="0" Message="Paddle::Loc {_loc}" MessageTextType="0" PreProcessedMessage="Paddle::Loc {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="14" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='df8b9f73-b84a-4542-9ef8-7cbfe4eb14fe'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>7	
8	Paddle::~Paddle() {/*Nothing to deconstruct*/ }
9	
10	void Paddle::init(CRGB leds[NUM_LEDS]) {
11		// _loc is on a scale from 0 to TOTAL_GAME_FIELD_UNITS, and is not scaled by number of LEDs.
12		// Game starts with the paddle in the middle of the line. All spatial units are in %, but using 
13		// integer math, with each unit equalling 1/100 of 1%.
--&gt;14		_loc = (TOTAL_GAME_FIELD_UNITS / 2) - 1;
15		// Width also needs to be in percentage. Since I'm using 50 LEDs as a start, 1 light is 2%, so 20/1000ths.
16		_width = LED_WIDTH; 
17		// Start one LED wide
18		// TODO - put a warning message if you try to play on less than 50.
19		_color = CRGB::Red;
20		_brightness = 255;
21		_brightnessDir = -1;
22		_brightnessSpeed = 2;
23		_leds = leds;
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="23" Name="Paddle.cpp, line 16" Id="4314bcda-9ec8-4d4f-a3b5-c74a751882fa" Enabled="0" Message="Paddle::Width {_width}" MessageTextType="0" PreProcessedMessage="Paddle::Width {0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="16" FileColumn="1" FunctionName="init(CRGB leds[NUM_LEDS])" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4314bcda-9ec8-4d4f-a3b5-c74a751882fa'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>9	
10	void Paddle::init(CRGB leds[NUM_LEDS]) {
11		// _loc is on a scale from 0 to TOTAL_GAME_FIELD_UNITS, and is not scaled by number of LEDs.
12		// Game starts with the paddle in the middle of the line. All spatial units are in %, but using 
13		// integer math, with each unit equalling 1/100 of 1%.
14		_loc = (TOTAL_GAME_FIELD_UNITS / 2) - 1;
15		// Width also needs to be in percentage. Since I'm using 50 LEDs as a start, 1 light is 2%, so 20/1000ths.
--&gt;16		_width = LED_WIDTH; 
17		// Start one LED wide
18		// TODO - put a warning message if you try to play on less than 50.
19		_color = CRGB::Red;
20		_brightness = 255;
21		_brightnessDir = -1;
22		_brightnessSpeed = 2;
23		_leds = leds;
24	}
25	
</Source>
        <MessageVariables>
          <MessageVariable Name="_width" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="24" Name="Paddle.cpp, line 64" Id="1ad97a40-a7f5-4bfc-b185-123e4f100234" Enabled="0" Message="Paddle rendering from {start} to {end}" MessageTextType="0" PreProcessedMessage="Paddle rendering from {0} to {1}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="64" FileColumn="1" FunctionName="render()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1ad97a40-a7f5-4bfc-b185-123e4f100234'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>57	int intensity;
58	
59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
--&gt;64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
71	
72			// EDIT - redoing it as integer, using just a simple "how far away am I, clamp that to 100%"
73			intensity = 100 + _width - abs((i * LED_WIDTH) - _loc);
</Source>
        <MessageVariables>
          <MessageVariable Name="start" Index="1" />
          <MessageVariable Name="end" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="25" Name="Paddle.cpp, line 61" Id="63717c86-c235-4d76-940b-b75f63ba4e5d" Enabled="0" Message="Paddle render at {_loc} with width {_width}, so starting at {start}" MessageTextType="0" PreProcessedMessage="Paddle render at {0} with width {1}, so starting at {2}" Condition="" ConditionType="1" CurrentHits="0" File="d:\dropbox\ajc\arduino\gtlo\paddle.cpp" FileLine="61" FileColumn="1" FunctionName="render()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='63717c86-c235-4d76-940b-b75f63ba4e5d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>54	
55	int start;
56	int end;
57	int intensity;
58	
59	void Paddle::render() {
60		// You need to start at loc - 1/2 width, rounding down
--&gt;61		start = max(0, _loc - _width);
62		start = start / LED_WIDTH;
63		// And go up to loc + 1/2 width, rounding up
64		end = 2 + (min(GAME_FIELD_UPPER_LIMIT, _loc + _width) / LED_WIDTH);
65		//intensity = 0;
66		for (i = start; i &lt; end; i++) {
67			// The formula (scaled to 0.0-1.0) is:
68			// intensity = max(0, min(1, (("half the width minus 1") + 1) - ("absolute distance from loc to i")
69			// Because I said so.
70			// Or you can look at the JPG or the Excel file in this folder and figure it out yourself.
</Source>
        <MessageVariables>
          <MessageVariable Name="_loc" Index="1" />
          <MessageVariable Name="_width" Index="2" />
          <MessageVariable Name="start" Index="3" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>